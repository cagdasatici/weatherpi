## Example nginx site configuration for WeatherPi
# Copy to /etc/nginx/sites-available/weatherpi and symlink to sites-enabled
# Edit `server_name` to your domain or IP and ensure paths match your install.

server {
    listen 80;
    server_name your.domain.example; # <- change this to your domain or public IP

    # Redirect ACME challenge to the certbot webroot
    location /.well-known/acme-challenge/ {
        root /var/www/letsencrypt;
    }

    # Redirect all HTTP to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    listen 443 ssl http2;
    server_name your.domain.example; # <- change this

    # SSL certificates (Let's Encrypt expected path)
    ssl_certificate /etc/letsencrypt/live/your.domain.example/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/your.domain.example/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;

    # Root for static site (if you host weather HTML from the Pi)
    root /home/pi/weatherpi;  # adjust to your repository path
    index weather.html;

    # Serve static files (icons, html)
    location / {
        try_files $uri $uri/ /weather.html;
    }

    # Proxy API requests to the local Flask/Gunicorn server
    location /api/ {
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_pass http://127.0.0.1:8000;
        proxy_read_timeout 90;
    }

    # Optional: Let's Encrypt challenge location (if using webroot plugin)
    location /.well-known/acme-challenge/ {
        root /var/www/letsencrypt;
    }

    # Recommended security headers
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options DENY;
    add_header X-XSS-Protection "1; mode=block";
}
